[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = 'context_filetype.vim'
on_i = 1
hook_source = '''
  call deoplete#custom#option('smart_case', v:true)

  " <CR>: close popup and save indent.
  inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
  function! s:my_cr_function() abort
    return deoplete#close_popup() . "\<CR>"
  endfunction

  inoremap <expr><C-g>       deoplete#refresh()
  inoremap <expr><C-e>       deoplete#close_popup()
  inoremap <silent><expr><C-l>       deoplete#complete_common_string()
  inoremap <expr><C-m>       deoplete#manual_complete()


  call deoplete#custom#source('_', 'matchers',
    \ ['matcher_fuzzy', 'matcher_length'])

  call deoplete#custom#option('keyword_patterns', {
    \ '_': '[a-zA-Z_]\k*',
    \ 'ruby': ['@*[a-zA-Z_]\w*[!?]?'],
    \})

  call deoplete#custom#var('omni', 'input_patterns', {
    \ 'ruby': ['[^. *\t]\.\w*', '[a-zA-Z_]\w*::'],
    \})

  call deoplete#custom#source('_', 'converters', [
    \ 'converter_remove_paren',
    \ 'converter_remove_overlap',
    \ 'matcher_length',
    \ 'converter_truncate_abbr',
    \ 'converter_truncate_menu',
    \ 'converter_auto_delimiter',
    \ 'converter_auto_paren',
    \ ])

  call deoplete#custom#option({
    \ 'auto_refresh_delay': 10,
    \ 'camel_case': v:true,
    \ 'skip_multibyte': v:true,
    \ 'prev_completion_mode': 'length',
    \ })

  call deoplete#enable()
'''

[[plugins]]
repo = 'Shougo/neoinclude.vim'
on_source = ['deoplete.nvim']
[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_i = 1
hook_source = '''
  imap <silent><C-k>     <Plug>(neosnippet_jump_or_expand)
  smap <silent><C-k>     <Plug>(neosnippet_jump_or_expand)
  xmap <silent><C-k>     <Plug>(neosnippet_expand_target)

  let g:neosnippet#enable_snipmate_compatibility = 1
  let g:neosnippet#enable_completed_snippet = 1
  let g:neosnippet#expand_word_boundary = 1
  let g:neosnippet#snippets_directory = '~/.vim/snippets'
'''
[[plugins]]
repo = 'Shougo/neosnippet-snippets'
[[plugins]]
repo = 'Shougo/neco-vim'
on_source = ['deoplete.nvim']
[[plugins]]
repo = 'Shougo/neco-syntax'
on_source = ['deoplete.nvim']
[[plugins]]
repo = 'ujihisa/neco-look'
on_source = ['deoplete.nvim']
[[plugins]]
repo = 'fishbullet/deoplete-ruby'
on_ft = 'ruby'
on_source = ['deoplete.nvim']
# [[plugins]]
# repo = 'uplus/deoplete-solargraph'
# on_ft = 'ruby'
# on_source = ['deoplete.nvim']
# [[plugins]]
# repo = 'carlitux/deoplete-ternjs'
# on_ft = ['javascript', 'coffee', 'typescript']
# on_source = ['deoplete.nvim']
# build = 'npm install -g tern'

[[plugins]]
repo = 'rhysd/git-messenger.vim'
on_cmd = 'GitMessenger'
on_map = '<Plug>(git-messenger'

[[plugins]]
repo = 'Shougo/context_filetype.vim'
hook_add = '''
  if !exists('g:context_filetype#same_filetypes')
    let g:context_filetype#same_filetypes = {}
  endif
  " let g:context_filetype#same_filetypes.html   = 'javascript, ruby'
  " let g:context_filetype#same_filetypes.haml   = 'javascript, ruby'
  let g:context_filetype#same_filetypes.slim   = 'javascript, ruby'
  let g:context_filetype#same_filetypes.yaml   = 'ruby'
  " let g:context_filetype#same_filetypes.php    = 'html, javascript'
  let g:context_filetype#same_filetypes.scss   = 'css, slim, coffee, ruby'
  let g:context_filetype#same_filetypes.sass   = 'css, slim, coffee, ruby'
  " let g:context_filetype#same_filetypes.js     = 'html, haml'
  let g:context_filetype#same_filetypes.es6   = 'javascript'
  let g:context_filetype#same_filetypes.coffee = 'javascript'
  " let g:context_filetype#same_filetypes.ruby   = 'slim'
  " In gitconfig buffers, completes from all buffers.
  let g:context_filetype#same_filetypes.gitconfig = '_'
  " In default, completes from all buffers.
  let g:context_filetype#same_filetypes._ = '_'

  let g:context_filetype#filetypes = {
  \ 'slim' : [
  \   {
  \    'start' : '^\s*-',
  \    'end' : '$', 'filetype' : 'ruby',
  \   },
  \   {
  \    'start' : '^\s*\w*=',
  \    'end' : '$', 'filetype' : 'ruby',
  \   },
  \   {
  \    'start' : '^\s*ruby:',
  \    'end' : '^\S', 'filetype' : 'ruby',
  \   },
  \ ],
  \ 'toml' : [
  \   {
  \    'start' : '^hook_add = ',
  \    'end' : '$', 'filetype' : 'vim',
  \   },
  \ ],
  \ 'vue' : [
  \   {
  \    'start' : '^<script type=''ts''>',
  \    'end' : '$', 'filetype' : 'typescript',
  \   },
  \ ]
  \}
'''


[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'rhysd/vim-textobj-ruby'
on_ft = 'ruby'

[[plugins]]
repo = 'rhysd/unite-ruby-require.vim'
on_ft = 'ruby'

[[plugins]]
repo = 'vim-scripts/ruby-matchit'
on_ft = 'ruby'

[[plugins]]
repo = 'tpope/vim-rails'
on_ft = 'ruby'

[[plugins]]
repo = 'vim-ruby/vim-ruby'
on_ft = 'ruby'
hook_add = '''
  let g:rubycomplete_rails                = 1
  let g:rubycomplete_buffer_loading       = 1
  let g:rubycomplete_classes_in_global    = 1
  let g:rubycomplete_include_object       = 1
  let g:rubycomplete_include_object_space = 1
'''

[[plugins]]
repo = 'slim-template/vim-slim'
on_ft = 'slim'

[[plugins]]
repo = 'cakebaker/scss-syntax.vim'
on_ft = 'scss'


# This is a Vim plugin that provides Tern-based JavaScript editing support.
[[plugins]]
repo = 'ternjs/tern_for_vim'
on_ft = ['javascript', 'coffee', 'typescript']

# Yet Another JavaScript Syntax for Vim
[[plugins]]
repo = 'othree/yajs.vim'
on_ft = ['javascript', 'coffee', 'typescript']

# Vim indenter for standalone and embedded JavaScript and TypeScript.
[[plugins]]
repo = 'jason0x43/vim-js-indent'
on_ft = ['javascript', 'typescript']

[[plugins]]
repo = 'othree/es.next.syntax.vim'
on_ft = ['javascript', 'coffee', 'typescript']

# # Yet Another TypeScript Syntax
# [[plugins]]
# repo = 'HerringtonDarkholme/yats.vim'
# on_ft = 'typescript'

# Typescript syntax files for Vim
[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = 'typescript'

# Typescript tooling for Neovim
# [[plugins]]
# repo = 'mhartington/nvim-typescript'
# build = './install.sh'
# on_ft = 'typescript'

# CoffeeScript support for vim
[[plugins]]
repo = 'kchmck/vim-coffee-script'
on_ft = 'coffee'

[[plugins]]
repo = 'posva/vim-vue'
on_ft = 'vue'

# Syntax for JavaScript libraries
[[plugins]]
repo = 'othree/javascript-libraries-syntax.vim'
on_ft = ['javascript', 'coffee', 'typescript']
hook_add = '''
  let b:javascript_lib_use_jquery = 1
  let b:javascript_lib_use_underscore = 1
'''

# quickly format javascript, html and css files
[[plugins]]
repo = 'maksimr/vim-jsbeautify'
on_ft = ['javascript', 'css', 'html']
hook_add = '''
  " for JS
  autocmd FileType javascript noremap <buffer>  <C-b> :call JsBeautify()<CR>
  autocmd FileType javascript vnoremap <buffer>  <C-b> :call RangeJsBeautify()<CR>
  " for json
  autocmd FileType json noremap <buffer> <C-b> :call JsonBeautify()<CR>
  autocmd FileType json vnoremap <buffer> <C-b> :call RangeJsonBeautify()<CR>
  " for jsx
  autocmd FileType jsx noremap <buffer> <C-b> :call JsxBeautify()<CR>
  autocmd FileType jsx vnoremap <buffer> <C-b> :call RangeJsxBeautify()<CR>
  " for html
  autocmd FileType html noremap <buffer> <C-b> :call HtmlBeautify()<CR>
  autocmd FileType html vnoremap <buffer> <C-b> :call RangeHtmlBeautify()<CR>
  " for css or scss
  autocmd FileType css noremap <buffer> <C-b> :call CSSBeautify()<CR>
  autocmd FileType css vnoremap <buffer> <C-b> :call RangeCSSBeautify()<CR>
'''

# HTML5 + inline SVG omnicomplete function, indent and syntax for Vim
[[plugins]]
repo = 'othree/html5.vim'
on_ft = ['html']

# CSS3 syntax (and syntax defined in some foreign specifications) support for Vimâ€™s built-in syntax/css.vim
[[plugins]]
repo = 'hail2u/vim-css3-syntax'
on_ft = ['css']

# colorize all text in the form #rgb, #rgba, #rrggbb, #rrgbbaa, rgb(...), rgba(...)
# [[plugins]]
# repo = 'lilydjwg/colorizer'
# on_ft = ['css', 'scss', 'vim']
