

[[plugins]]
repo = 'Shougo/junkfile.vim'


[[plugins]]
# pip3 install --user pynvim
repo = 'Shougo/defx.nvim'
hook_add = '''
nnoremap <silent>   <leader>f
\ :<C-u>Defx `expand('%:p:h')` -search=`expand('%:p')` -direction=topleft -split=vertical -winwidth=50 -toggle -buffer-name=tab`tabpagenr()`<CR>

" Define mappings
autocmd FileType defx call s:defx_my_settings()
function! s:defx_my_settings() abort
  nnoremap <silent><buffer><expr> <CR> defx#do_action('drop')
  nnoremap <silent><buffer><expr> e defx#do_action('drop')
  nnoremap <silent><buffer><expr> E defx#do_action('open', 'vsplit')
  nnoremap <silent><buffer><expr> c defx#do_action('copy')
  nnoremap <silent><buffer><expr> m defx#do_action('move')
  nnoremap <silent><buffer><expr> p defx#do_action('paste')
  nnoremap <silent><buffer><expr> l defx#do_action('open_or_close_tree')
  nnoremap <silent><buffer><expr> K defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> N defx#do_action('new_file')
  nnoremap <silent><buffer><expr> M defx#do_action('new_multiple_files')
  nnoremap <silent><buffer><expr> d defx#do_action('remove_trash')
  nnoremap <silent><buffer><expr> r defx#do_action('rename')
  nnoremap <silent><buffer><expr> yy defx#do_action('yank_path')
  nnoremap <silent><buffer><expr> h defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> ~ defx#do_action('cd')
  nnoremap <silent><buffer><expr> \ defx#do_action('cd', getcwd())
  nnoremap <silent><buffer><expr> q defx#do_action('quit')
  nnoremap <silent><buffer><expr> <Space> defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr> * defx#do_action('toggle_select_all')
  nnoremap <silent><buffer><expr> j line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr> k line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer><expr> <C-l> defx#do_action('redraw')
endfunction
'''

[[plugins]]
repo = 'kana/vim-textobj-user'
[[plugins]]
repo = 'kana/vim-textobj-line'
[[plugins]]
repo = 'lucapette/vim-textobj-underscore'
[[plugins]]
repo = 'kana/vim-textobj-entire'
[[plugins]]
repo = 'rhysd/textobj-word-column.vim'
[[plugins]]
repo = 'jwhitley/vim-matchit'
[[plugins]]
repo = 'tpope/vim-surround'
[[plugins]]
repo = 'tpope/vim-endwise'
[[plugins]]
# let g:loaded_matchparen = 1
repo = 'itchyny/vim-parenmatch'
[[plugins]]
repo = 'itchyny/vim-cursorword'


[[plugins]]
repo = 'kana/vim-operator-user.git'

[[plugins]]
repo = 'kana/vim-operator-replace.git'
hook_add = '''
  map R <Plug>(operator-replace)
'''

[[plugins]]
repo = 'tyru/operator-camelize.vim'
hook_add = '''
  map <leader>c <plug>(operator-camelize-toggle)
'''

[[plugins]]
repo = 'osyo-manga/vim-anzu'
hook_add = '''
  nmap n <Plug>(anzu-n-with-echo)
  nmap N <Plug>(anzu-N-with-echo)
  nmap * <Plug>(anzu-star)
  nmap # <Plug>(anzu-sharp)
'''


[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
  nmap gs :Gstatus<CR>
  nmap gb :Gblame<CR>
  nmap gd :Gdiff<CR>
'''
[[plugins]]
repo = 'tpope/vim-rhubarb'
[[plugins]]
repo = 'cohama/agit.vim'
hook_add = '''
  let g:agit_preset_views = {
  \ 'default': [
  \   {'name': 'log'},
  \   {'name': 'stat',
  \    'layout': 'botright vnew'},
  \   {'name': 'diff',
  \    'layout': 'belowright {winheight(".") * 3 / 4}new'}
  \ ],
  \ 'file': [
  \   {'name': 'filelog'},
  \   {'name': 'stat',
  \    'layout': 'botright vnew'},
  \   {'name': 'diff',
  \    'layout': 'belowright {winheight(".") * 3 / 4}new'}
  \ ]}

  nnoremap <silent> <leader>ga :<C-u>Agit<CR>
  nnoremap <silent> <leader>g :<C-u>AgitFile<CR>
'''

[[plugins]]
repo = 'rhysd/committia.vim'
[[plugins]]
repo = 'lambdalisue/gina.vim'
[[plugins]]
repo = 'kmnk/vim-unite-giti.git'

[[plugins]]
repo = 'powerman/vim-plugin-AnsiEsc'

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
  let g:prettier#config#print_width = 140
  let g:prettier#config#arrow_parens = 'always'
  let g:ale_completion_enabled = 1
  let g:ale_linters = {
        \ 'html': ['htmlhint'],
        \ 'css': ['stylelint'],
        \ 'javascript': ['eslint']
        \ }
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  let g:lightline = {
          \ 'colorscheme': 'iceberg',
          \ 'active': {
          \ 'left': [ [ 'mode', 'paste' ],
          \           [ 'fugitive', 'readonly', 'filename', 'modified', 'anzu'] ],
          \ 'right': [ [ 'lineinfo' ],
          \            [ 'percent' ],
          \            [ 'fileformat', 'fileencoding', 'filetype' ],
          \            [ 'count' ] ]
          \ },
          \ 'component_function': {
          \   'modified': 'MyModified',
          \   'readonly': 'MyReadonly',
          \   'fugitive': 'MyFugitive',
          \   'filename': 'MyFilename',
          \   'fileformat': 'MyFileformat',
          \   'filetype': 'MyFiletype',
          \   'fileencoding': 'MyFileencoding',
          \   'mode': 'MyMode',
          \   'anzu': 'anzu#search_status',
          \   'count': 'VisSum'
          \ }
  \ }

  function! MyModified()
    return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
  endfunction

  function! MyReadonly()
    return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'x' : ''
  endfunction

  function! MyFilename()
    return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
          \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
          \  &ft == 'unite' ? unite#get_status_string() :
          \  &ft == 'vimshell' ? vimshell#get_status_string() :
          \ '' != expand('%') ? expand('%') : '[No Name]') .
          \ ('' != MyModified() ? ' ' . MyModified() : '')
  endfunction

  function! MyFugitive()
    try
      if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
        return fugitive#head()
      endif
    catch
    endtry
    return ''
  endfunction

  function! MyFileformat()
    return winwidth(0) > 70 ? &fileformat : ''
  endfunction

  function! MyFiletype()
    return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
  endfunction

  function! MyFileencoding()
    return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
  endfunction

  function! MyMode()
    return winwidth(0) > 60 ? lightline#mode() : ''
  endfunction
'''
[[plugins]]
repo = 'jimsei/winresizer'
[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
[[plugins]]
repo = 'LeafCage/yankround.vim'
hook_add = '''
  nmap p <Plug>(yankround-p)
  xmap p <Plug>(yankround-p)
  nmap P <Plug>(yankround-P)
  nmap gp <Plug>(yankround-gp)
  xmap gp <Plug>(yankround-gp)
  nmap gP <Plug>(yankround-gP)
  nmap <C-p> <Plug>(yankround-prev)
  nmap <C-n> <Plug>(yankround-next)
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
  let g:quickrun_config = {}
  let g:quickrun_config._ = {'runner' : 'vimproc'}

  " %cはcommandに設定した値に置換される
  " %oはcmdoptに設定した値に置換される
  " %sはソースファイル名に置換される
  " ref: [cmdline - Vim日本語ドキュメント](http://vim-jp.org/vimdoc-ja/cmdline.html)

  let g:quickrun_config['ruby.minitest'] = {
    \ 'exec': 'm %s:.'
    \}

  let g:quickrun_config['ruby.minitest_line'] = {
    \ 'exec': "m %s:.:%{line('.')}",
    \ 'cmdopt': ":%{line('.')}"
    \}

  let g:quickrun_config['ruby.rspec'] = {
    \ 'command': 'bin/rspec',
    \ 'cmdopt': '--color --tty',
    \ 'exec': '%c %o %s'
    \}

  let g:quickrun_config['ruby.rspec_line'] = {
    \ 'command': 'bin/rspec',
    \ 'cmdopt': '--color --tty',
    \ 'exec': "%c %s:%{line('.')} %o"
    \}

  function! MinitestQuickrun()
    let b:quickrun_config = {'type' : 'ruby.minitest'}

    nnoremap <silent><buffer> <Leader>lr :<C-u>QuickRun ruby.minitest_line<CR>
  endfunction

  function! RSpecQuickrun()
    let b:quickrun_config = {'type' : 'ruby.rspec'}

    nnoremap <silent><buffer> <Leader>lr :<C-u>QuickRun ruby.rspec_line<CR>
  endfunction

  augroup Quickrun
    autocmd!
    autocmd FileType quickrun AnsiEsc
    autocmd BufNewFile,BufRead *_test.rb set filetype=ruby.minitest
    autocmd BufNewFile,BufRead *_spec.rb set filetype=ruby.rspec
    autocmd BufReadPost *_test.rb call MinitestQuickrun()
    autocmd BufReadPost *_spec.rb call RSpecQuickrun()
  augroup END
'''

[[plugins]]
repo = 'tomtom/tcomment_vim'
[[plugins]]
repo = 'bkad/CamelCaseMotion'


[[plugins]]
repo = 'kana/vim-fakeclip'

[[plugins]]
repo = 'h1mesuke/vim-alignta'
[[plugins]]
repo = 'godlygeek/tabular'
