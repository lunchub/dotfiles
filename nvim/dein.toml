[[plugins]]
repo = 'junegunn/fzf.vim'
hook_add = '''
  nnoremap    [fzf]   <Nop>
  nmap      , [fzf]

  nnoremap <silent> <C-f> :<C-u>CustomFZF<CR>
  nnoremap <silent> [fzf]b :<C-u>FZFBuffers<CR>
  nnoremap <silent> [fzf]m :<C-u>FZFMru<CR>
  nnoremap <silent> [fzf]gg :<C-u>Agg<CR>
  nnoremap <silent> [fzf]gc :<C-u>Agc<CR>

  function! s:common_handler(lines)
    if len(a:lines) < 2 | return | endif

    let cmd = get({
      \ 'ctrl-s': 'split',
      \ 'ctrl-v': 'vertical split',
      \ 'ctrl-n': 'tabe'
    \ }, a:lines[0], 'e')

    let list = map(a:lines[1:], '{"filename": v:val}')

    if a:lines[0] == 'ctrl-n'
      let first = list[0]
      execute cmd first.filename

      if len(list) > 1
        call setqflist(list)
        copen
        wincmd p
      endif
    else
      for file in list
        execute cmd file.filename
      endfor
    endif
  endfunction

  command! -nargs=* CustomFZF call fzf#run({
  \   'source': 'git ls-files',
  \   'sink*':    function('<sid>common_handler'),
  \   'options': '-m -x --reverse --expect=enter,ctrl-s,ctrl-v,ctrl-n',
  \   'down':    '50%'
  \ })

  command! FZFBuffers call fzf#run(fzf#wrap({
  \   'source': map(range(1, bufnr('$')), 'bufname(v:val)'),
  \   'sink*':    function('<sid>common_handler'),
  \   'options': '-m -x --reverse --expect=enter,ctrl-s,ctrl-v,ctrl-n',
  \   'down':    '50%'
  \ }))

  function! s:old_files_and_buffers()
    return filter(
    \   map(
    \     filter(
    \       uniq(
    \         extend(
    \           copy(v:oldfiles),
    \           map(filter(range(1, bufnr('$')), 'buflisted(v:val)'), 'bufname(v:val)')
    \         )
    \       ),
    \       "v:val =~ '^'.getcwd()"
    \     ),
    \     'substitute(v:val, getcwd()."/", "", "g")'
    \   ),
    \   { idx, val -> val !~ 'Agit\|denite' }
    \ )
  endfunction

  command! FZFMru call fzf#run({
  \   'source':  s:old_files_and_buffers(),
  \   'sink*':    function('<sid>common_handler'),
  \   'options': '-m -x --reverse --expect=enter,ctrl-s,ctrl-v,ctrl-n',
  \   'down':    '50%'
  \ })

  function! s:ag_to_qf(line)
    let parts = split(a:line, ':')
    return {'filename': parts[0], 'lnum': parts[1], 'col': parts[2],
          \ 'text': join(parts[3:], ':')}
  endfunction

  function! s:ag_handler(lines)
    if len(a:lines) < 2 | return | endif

    let cmd = get({
      \ 'ctrl-s': 'split',
      \ 'ctrl-v': 'vertical split',
      \ 'ctrl-n': 'tabe'
    \ }, a:lines[0], 'e')

    let list = map(a:lines[1:], 's:ag_to_qf(v:val)')

    if a:lines[0] == 'ctrl-n'
      let first = list[0]
      execute cmd escape(first.filename, ' %#\')
      execute first.lnum
      execute 'normal!' first.col.'|zz'

      if len(list) > 1
        call setqflist(list)
        copen
        wincmd p
      endif
    else
      for file in list
        execute cmd file.filename
        execute file.lnum
        execute 'normal!' file.col.'|zz'
      endfor
    endif
  endfunction

  command! -nargs=* Agg call fzf#run({
  \   'source':  printf('ag --column --color "%s"',
  \                     escape(empty(<q-args>) ? '^(?=.)' : <q-args>, '"\')),
  \   'sink*':    function('<sid>ag_handler'),
  \   'options': '--ansi --expect=ctrl-s,ctrl-v,ctrl-n '.
  \              '-m -x --reverse '.
  \              '--bind=ctrl-a:select-all,ctrl-d:deselect-all',
  \   'down':    '50%'
  \ })

  command! -nargs=* Agc call fzf#run({
  \   'source':  printf('ag --column --color "%s"',
  \                     escape(empty(<q-args>) ? expand('<cword>') : <q-args>, '"\')),
  \   'sink*':    function('<sid>ag_handler'),
  \   'options': '--ansi --expect=ctrl-s,ctrl-v,ctrl-n '.
  \              '-m -x --reverse '.
  \              '--bind=ctrl-a:select-all,ctrl-d:deselect-all',
  \   'down':    '50%'
  \ })
'''

[[plugins]]
repo = 'Shougo/junkfile.vim'

[[plugins]]
# pip3 install --user pynvim
repo = 'Shougo/defx.nvim'
hook_add = '''
nnoremap <silent>   <leader>f
\ :<C-u>Defx `expand('%:p:h')` -search=`expand('%:p')` -direction=topleft -split=vertical -winwidth=50 -toggle -buffer-name=tab`tabpagenr()`<CR>

" Define mappings
autocmd FileType defx call s:defx_my_settings()
function! s:defx_my_settings() abort
  nnoremap <silent><buffer><expr> <CR> defx#do_action('drop')
  nnoremap <silent><buffer><expr> e defx#do_action('drop')
  nnoremap <silent><buffer><expr> E defx#do_action('open', 'vsplit')
  nnoremap <silent><buffer><expr> c defx#do_action('copy')
  nnoremap <silent><buffer><expr> m defx#do_action('move')
  nnoremap <silent><buffer><expr> p defx#do_action('paste')
  nnoremap <silent><buffer><expr> l defx#do_action('open_or_close_tree')
  nnoremap <silent><buffer><expr> K defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> N defx#do_action('new_file')
  nnoremap <silent><buffer><expr> M defx#do_action('new_multiple_files')
  nnoremap <silent><buffer><expr> d defx#do_action('remove_trash')
  nnoremap <silent><buffer><expr> r defx#do_action('rename')
  nnoremap <silent><buffer><expr> yy defx#do_action('yank_path')
  nnoremap <silent><buffer><expr> h defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> ~ defx#do_action('cd')
  nnoremap <silent><buffer><expr> \ defx#do_action('cd', getcwd())
  nnoremap <silent><buffer><expr> q defx#do_action('quit')
  nnoremap <silent><buffer><expr> <Space> defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr> * defx#do_action('toggle_select_all')
  nnoremap <silent><buffer><expr> j line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr> k line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer><expr> <C-l> defx#do_action('redraw')
endfunction
'''

[[plugins]]
repo = 'kana/vim-textobj-user'
[[plugins]]
repo = 'kana/vim-textobj-line'
[[plugins]]
repo = 'lucapette/vim-textobj-underscore'
[[plugins]]
repo = 'kana/vim-textobj-entire'
[[plugins]]
repo = 'rhysd/textobj-word-column.vim'
[[plugins]]
repo = 'jwhitley/vim-matchit'
[[plugins]]
repo = 'tpope/vim-surround'
[[plugins]]
repo = 'tpope/vim-endwise'
[[plugins]]
# let g:loaded_matchparen = 1
repo = 'itchyny/vim-parenmatch'
[[plugins]]
repo = 'itchyny/vim-cursorword'


[[plugins]]
repo = 'kana/vim-operator-user.git'

[[plugins]]
repo = 'kana/vim-operator-replace.git'
hook_add = '''
  map R <Plug>(operator-replace)
'''

[[plugins]]
repo = 'tyru/operator-camelize.vim'
hook_add = '''
  map <leader>c <plug>(operator-camelize-toggle)
'''

[[plugins]]
repo = 'osyo-manga/vim-anzu'
hook_add = '''
  nmap n <Plug>(anzu-n-with-echo)
  nmap N <Plug>(anzu-N-with-echo)
  nmap * <Plug>(anzu-star)
  nmap # <Plug>(anzu-sharp)
'''


[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
  nmap gs :Gstatus<CR>
  nmap gb :Gblame<CR>
  nmap gd :Gdiff<CR>

  autocmd FileType fugitiveblame call s:fugitiveblame_my_settings()
  function! s:fugitiveblame_my_settings() abort
    nnoremap <silent> <C-p> :<C-u>!hub openpr <cword><CR>
  endfunction
'''

[[plugins]]
repo = 'tpope/vim-rhubarb'
[[plugins]]
repo = 'cohama/agit.vim'
hook_add = '''
  let g:agit_preset_views = {
  \ 'default': [
  \   {'name': 'log'},
  \   {'name': 'stat',
  \    'layout': 'botright vnew'},
  \   {'name': 'diff',
  \    'layout': 'belowright {winheight(".") * 3 / 4}new'}
  \ ],
  \ 'file': [
  \   {'name': 'filelog'},
  \   {'name': 'stat',
  \    'layout': 'botright vnew'},
  \   {'name': 'diff',
  \    'layout': 'belowright {winheight(".") * 3 / 4}new'}
  \ ]}

  nnoremap <silent> <leader>ga :<C-u>Agit<CR>
  nnoremap <silent> <leader>g :<C-u>AgitFile<CR>
'''

[[plugins]]
repo = 'rhysd/committia.vim'
[[plugins]]
repo = 'lambdalisue/gina.vim'
[[plugins]]
repo = 'kmnk/vim-unite-giti.git'

[[plugins]]
repo = 'powerman/vim-plugin-AnsiEsc'

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
  let g:prettier#config#print_width = 140
  let g:prettier#config#arrow_parens = 'always'
  let g:ale_completion_enabled = 1
  let g:ale_linters = {
        \ 'html': ['htmlhint'],
        \ 'css': ['stylelint'],
        \ 'javascript': ['eslint']
        \ }
'''

[[plugins]]
repo = 'vim-airline/vim-airline'

[[plugins]]
repo = 'jimsei/winresizer'
[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
[[plugins]]
repo = 'LeafCage/yankround.vim'
hook_add = '''
  nmap p <Plug>(yankround-p)
  xmap p <Plug>(yankround-p)
  nmap P <Plug>(yankround-P)
  nmap gp <Plug>(yankround-gp)
  xmap gp <Plug>(yankround-gp)
  nmap gP <Plug>(yankround-gP)
  nmap <C-p> <Plug>(yankround-prev)
  nmap <C-n> <Plug>(yankround-next)
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
  let g:quickrun_config = {}
  let g:quickrun_config._ = {'runner' : 'vimproc'}

  " %cはcommandに設定した値に置換される
  " %oはcmdoptに設定した値に置換される
  " %sはソースファイル名に置換される
  " ref: [cmdline - Vim日本語ドキュメント](http://vim-jp.org/vimdoc-ja/cmdline.html)

  let g:quickrun_config['ruby.minitest'] = {
    \ 'exec': 'm %s:.'
    \}

  let g:quickrun_config['ruby.minitest_line'] = {
    \ 'exec': "m %s:.:%{line('.')}",
    \ 'cmdopt': ":%{line('.')}"
    \}

  let g:quickrun_config['ruby.rspec'] = {
    \ 'command': 'bin/rspec',
    \ 'cmdopt': '--color --tty',
    \ 'exec': '%c %o %s'
    \}

  let g:quickrun_config['ruby.rspec_line'] = {
    \ 'command': 'bin/rspec',
    \ 'cmdopt': '--color --tty',
    \ 'exec': "%c %s:%{line('.')} %o"
    \}

  function! MinitestQuickrun()
    let b:quickrun_config = {'type' : 'ruby.minitest'}

    nnoremap <silent><buffer> <Leader>lr :<C-u>QuickRun ruby.minitest_line<CR>
  endfunction

  function! RSpecQuickrun()
    let b:quickrun_config = {'type' : 'ruby.rspec'}

    nnoremap <silent><buffer> <Leader>lr :<C-u>QuickRun ruby.rspec_line<CR>
  endfunction

  augroup Quickrun
    autocmd!
    autocmd FileType quickrun AnsiEsc
    autocmd BufNewFile,BufRead *_test.rb set filetype=ruby.minitest
    autocmd BufNewFile,BufRead *_spec.rb set filetype=ruby.rspec
    autocmd BufReadPost *_test.rb call MinitestQuickrun()
    autocmd BufReadPost *_spec.rb call RSpecQuickrun()
  augroup END
'''

[[plugins]]
repo = 'tomtom/tcomment_vim'
[[plugins]]
repo = 'bkad/CamelCaseMotion'


[[plugins]]
repo = 'kana/vim-fakeclip'

[[plugins]]
repo = 'h1mesuke/vim-alignta'
[[plugins]]
repo = 'godlygeek/tabular'


[[plugins]]
repo = 'Shougo/context_filetype.vim'
hook_add = '''
  if !exists('g:context_filetype#same_filetypes')
    let g:context_filetype#same_filetypes = {}
  endif
  " let g:context_filetype#same_filetypes.html   = 'javascript, ruby'
  " let g:context_filetype#same_filetypes.haml   = 'javascript, ruby'
  let g:context_filetype#same_filetypes.slim   = 'javascript, ruby'
  let g:context_filetype#same_filetypes.yaml   = 'ruby'
  " let g:context_filetype#same_filetypes.php    = 'html, javascript'
  let g:context_filetype#same_filetypes.scss   = 'css, slim, coffee, ruby'
  let g:context_filetype#same_filetypes.sass   = 'css, slim, coffee, ruby'
  " let g:context_filetype#same_filetypes.js     = 'html, haml'
  let g:context_filetype#same_filetypes.es6   = 'javascript'
  let g:context_filetype#same_filetypes.coffee = 'javascript'
  " let g:context_filetype#same_filetypes.ruby   = 'slim'
  " In gitconfig buffers, completes from all buffers.
  let g:context_filetype#same_filetypes.gitconfig = '_'
  " In default, completes from all buffers.
  let g:context_filetype#same_filetypes._ = '_'

  let g:context_filetype#filetypes = {
  \ 'slim' : [
  \   {
  \    'start' : '^\s*-',
  \    'end' : '$', 'filetype' : 'ruby',
  \   },
  \   {
  \    'start' : '^\s*\w*=',
  \    'end' : '$', 'filetype' : 'ruby',
  \   },
  \   {
  \    'start' : '^\s*ruby:',
  \    'end' : '^\S', 'filetype' : 'ruby',
  \   },
  \ ],
  \ 'toml' : [
  \   {
  \    'start' : '^hook_add = ',
  \    'end' : '$', 'filetype' : 'vim',
  \   },
  \ ],
  \ 'vue' : [
  \   {
  \    'start' : '^<script type=''ts''>',
  \    'end' : '$', 'filetype' : 'typescript',
  \   },
  \ ]
  \}
'''
