set nocompatible                 " vi互換なし
set encoding=utf-8
set fileencodings=utf-8
" let mapleader = ","              " キーマップリーダー
map ¥ <leader>
set nobackup                     " バックアップ取らない
set noswapfile                   " スワップファイル作らない
set hidden                       " 編集中でも他のファイルを開けるようにする
set backspace=indent,eol,start   " バックスペースでなんでも消せるように
set formatoptions=lmoq           " テキスト整形オプション，マルチバイト系を追加
set whichwrap=b,s,h,l,<,>,[,]    " カーソルを行頭、行末で止まらないようにする
set showcmd                      " コマンドをステータス行に表示
set showmode                     " 現在のモードを表示
set viminfo='50,<1000,s100,\"50  " viminfoファイルの設定
set modelines=0                  " モードラインは無効
" set paste        " ペースト時にautoindentを無効に(onにするとautocomplpop.vimが動かない)
autocmd FileType * setlocal formatoptions-=r " 改行時にコメントを受け継がない
autocmd FileType * setlocal formatoptions-=o " 改行時にコメントを受け継がない
set clipboard=unnamed,autoselect " OSのクリップボードを使用する
" set mouse=a " ターミナルでマウスを使用できるようにする
" set guioptions+=a
set ttymouse=xterm2
" set clipboard+=unnamed
" set clipboard+=autoselect
set laststatus=2 " 常にステータスラインを表示
set ruler " カーソルが何行目の何列目に置かれているかを表示する
set number " 行番号を表示する
set noequalalways " ウインドウ幅の自動調整を行わない
syntax enable


"====================================================================================
" インデント調整
"====================================================================================
setlocal indentkeys=!^F,o,O
setlocal expandtab
setlocal tabstop<
setlocal softtabstop=2
setlocal shiftwidth=2
setlocal autoindent

"====================================================================================
" Rsense
"====================================================================================
let g:rsenseHome = '/usr/local/Cellar/rsense/0.3/libexec'
let g:rsenseUseOmniFunc = 1


"====================================================================================
" Neobundle
"====================================================================================
filetype off

if has('vim_starting')
  set runtimepath+=~/.vim/bundle/neobundle.vim/
  call neobundle#rc(expand('~/.vim/bundle/'))
endif

"----------------------------------------------------------
" basic
"----------------------------------------------------------

NeoBundle 'Shougo/vimproc'
NeoBundle 'Shougo/neocomplcache'
" NeoBundle 'Shougo/neosnippet'


filetype plugin indent on     " required!



"====================================================================================
" Plugin Settings
"====================================================================================


"----------------------------------------------------------
" Neocomplcache
"----------------------------------------------------------

" Rsense
let g:neocomplcache#sources#rsense#home_directory = "/usr/local/Cellar/rsense/0.3/libexec/"

" Use neocomplcache.
let g:neocomplcache_enable_at_startup = 1
" Use smartcase.
let g:neocomplcache_enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplcache_min_syntax_length = 3
let g:neocomplcache_enable_camel_case_completion = 1
" Use underbar completion.
let g:neocomplcache_enable_underbar_completion = 1
" Set minimum syntax keyword length.
" let g:neocomplcache_min_syntax_length = 3
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'
" -入力による候補番号の表示
let g:neocomplcache_enable_quick_match = 0
" 補完候補の一番先頭を選択状態にする(AutoComplPopと似た動作)
let g:neocomplcache_enable_auto_select = 1

" シンタックス補完を無効に
" let g:neocomplcache_plugin_disable = {
"   \ 'syntax_complete' : 1,
"   \ }

" Define dictionary.
let g:neocomplcache_dictionary_filetype_lists = {
 \ 'default'    : '',
 \ 'php'        : $HOME . '/.vim/dict/php.dict',
 \ 'javascript' : $HOME . '/.vim/dict/javascript.dict',
 \ 'coffee'     : $HOME . '/.vim/dict/javascript.dict',
  \ }

" Define keyword.
if !exists('g:neocomplcache_keyword_patterns')
  let g:neocomplcache_keyword_patterns = {}
endif
let g:neocomplcache_keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplcache#undo_completion()
inoremap <expr><C-l>     neocomplcache#complete_common_string()

" 関数を補完するための区切り文字パターン
if !exists('g:neocomplcache_delimiter_patterns')
  let g:neocomplcache_delimiter_patterns = {}
endif
let g:neocomplcache_delimiter_patterns['php'] = ['->', '::', '\']

" カーソルより後のキーワードパターンを認識。
" h|geとなっている状態(|はカーソル)で、hogeを補完したときに後ろのキーワードを認識してho|geと補完する機能。
" 修正するときにかなり便利。
if !exists('g:neocomplcache_next_keyword_patterns')
  let g:neocomplcache_next_keyword_patterns = {}
endif

" スニペットを展開する。スニペットが関係しないところでは行末まで削除
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" vim標準のキーワード補完を置き換える
inoremap <expr><C-n> neocomplcache#manual_keyword_complete()

" 単語入力中だけ補完候補を出す
inoremap <expr><C-h> pumvisible() ? "\<C-y>\<C-h>" : "\<C-h>"
inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplcache#close_popup()
inoremap <expr><C-e>  neocomplcache#cancel_popup()

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete

" Enable heavy omni completion.
if !exists('g:neocomplcache_omni_patterns')
  let g:neocomplcache_omni_patterns = {}
endif
let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::'
let g:neocomplcache_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'

" バッファ共有設定
let g:neocomplcache_same_filetype_lists = {
\  'html' : 'html,javascript,php,ruby'
\, 'haml' : 'haml,javascript,ruby'
\, 'php'  : 'html,javascript,php'
\, 'js'   : 'html,php,ruby'
\ }
